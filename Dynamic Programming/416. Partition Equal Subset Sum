class Solution {                                        //本题目是将集合划分为两个和相等的部分，其实就是得到和为定值的集合
public:
    bool canPartition(vector<int>& nums) {
        int m = nums.size();
        int sum = 0;
        for(auto num:nums){
            sum+=num;
        }
        if(sum%2) return false;
        sum/=2;
        int n = sum;
        vector<bool> t(n+1);
        vector<vector<bool>> res(m+1,t);
        res[0][0] = true;
        for (int i = 1; i < m+1; i++) {
            res[i][0] = true;
        }
        for (int j = 1; j < n+1; j++) {
            res[0][j] = false;
        }
        for(int i= 1;i<=m;++i){
            for(int j = 1;j<=n;++j){
                res[i][j] =res[i-1][j];
                if(j>=nums[i-1]) res[i][j]= (res[i][j]||res[i-1][j-nums[i-1]]); //关键在于这个状态转移方程
            }
        }
        return res[m][n];
    }
};
