class Solution {                                                   //本题是求最短和，利用动态规划的方法很容易可以得到。
public:                                                            //子问题的划分，以及递推方程的求解都比较容易。
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int m = grid.size();
        int n = grid[0].size();
        for(int i = 0;i<m;++i){
            for(int j = 0;j<n;++j){
                if(i ==0 && j==0) grid[i][j]=grid[0][0];
                if(i ==0 && j!=0 ) grid[i][j]=grid[i][j-1]+grid[i][j];
                if(j ==0 && i!=0 ) grid[i][j]=grid[i-1][j]+grid[i][j];
                if(i !=0 && j!=0 ) grid[i][j] =min(grid[i-1][j],grid[i][j-1])+grid[i][j];
            }
        }
        return grid[m-1][n-1];
    }
};
