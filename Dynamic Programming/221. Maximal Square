class Solution {                                          //记录一下，做完这道题之后很开心，感觉对动态规划有了感觉。这道题是求最大的可能的矩形
public:                                                   //关键在于状态转移方程。dp[i][j]里面保存的是以（i，j）为右下角顶点的正方形的最大可能边长
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m = matrix.size(),n=matrix[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        int maxlen = 0;
        for(int i = 0;i<m;++i){
            for(int j = 0;j<n;++j){
                if(i == 0 || j == 0){
                    dp[i][j]= (matrix[i][j] == '1');
                    maxlen = max(dp[i][j],maxlen);
                }else{
                    if(matrix[i][j] == '0'){
                        dp[i][j] = 0;
                    }else{
                        dp[i][j] = min(min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1])+1;
                        maxlen = max(dp[i][j],maxlen);
                        
                    }
                }
            }
        }
        return maxlen*maxlen;
    }
};
