class Solution {                             //找到重复的数字。我采用的是哈希表，将数字放入哈希表中，再进行查找
public:
    int findDuplicate(vector<int>& nums) {
        unordered_set<int> iset;
        iset.insert(nums[0]);
        int n = nums.size();
        for(int i = 1;i<n+1;++i){
            auto iter_end = iset.end();
            if(iter_end != iset.find(nums[i]) ) return nums[i];
            iset.insert(nums[i]);
        }
    }
};
class Solution {                              //采用快慢指针，本质上是利用快慢指针可以在环里相遇，再从相遇点推到环的入口点就找到了重复的数字
public:                                       
    int findDuplicate(vector<int>& nums) {
         int slow = nums[0];
         int fast = nums[nums[0]];
        while(fast != slow){
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        fast = 0;
        while(fast != slow){
            fast = nums[fast];
            slow = nums[slow];
        }
        return fast;
    }
};
